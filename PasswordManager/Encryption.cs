using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace PasswordManager
{
    public class Encryption
    {
        private static string Key = "{OyBQIXc_tt7jjM&&";
        private static string IV = "q!WM=KY%\\J%;";

        //Default constructor.
        public Encryption() { }

        //Start Encryption
        public string[] StartEncrypt(string[] input)
        {
            var encryptDataArray = new List<string>();
            foreach(string val in input)
            {
                encryptDataArray.Add(Encrypt(val));
            }

            return encryptDataArray.ToArray();
        }

        //Start Decrypt
        public string[] StartDecrypt(string[] input)
        {
            var decryptArray = new List<string>();
            foreach(string val in input)
            {
                decryptArray.Add(Decrypt(val));
            }

            return decryptArray.ToArray();
        }

        //AES 256 ASCII Encryption
        private static string Encrypt(string rawData)
        {
            byte[] PlainTextBytes = System.Text.ASCIIEncoding.ASCII.GetBytes(rawData);
            AesCryptoServiceProvider aes = new AesCryptoServiceProvider();
            aes.BlockSize = 128;
            aes.KeySize = 256;
            aes.Key = System.Text.ASCIIEncoding.ASCII.GetBytes(Key);
            aes.IV = System.Text.ASCIIEncoding.ASCII.GetBytes(IV);
            aes.Padding = PaddingMode.PKCS7;
            aes.Mode = CipherMode.CBC;
            ICryptoTransform crypto = aes.CreateEncryptor(aes.Key, aes.IV);
            byte[] encryptedStuff = crypto.TransformFinalBlock(PlainTextBytes, 0, PlainTextBytes.Length);
            crypto.Dispose();
            return Convert.ToBase64String(encryptedStuff);
        }

        //AES Decrypt Algo
        private static string Decrypt(string encryptData)
        {
            byte[] encryptbytes = System.Text.ASCIIEncoding.ASCII.GetBytes(Key);
            AesCryptoServiceProvider aes = new AesCryptoServiceProvider();
            aes.BlockSize = 128;
            aes.KeySize = 256;
            aes.Key = System.Text.ASCIIEncoding.ASCII.GetBytes(Key);
            aes.IV = System.Text.ASCIIEncoding.ASCII.GetBytes(IV);
            aes.Padding = PaddingMode.PKCS7;
            aes.Mode = CipherMode.CBC;
            ICryptoTransform crypto = aes.CreateDecryptor(aes.Key, aes.IV);
            byte[] decryptedstuff = crypto.TransformFinalBlock(encryptbytes, 0, encryptbytes.Length);
            crypto.Dispose();

            return System.Text.ASCIIEncoding.ASCII.GetString(decryptedstuff);
        }

        //Remove key from memory upon application close.
        [System.Runtime.InteropServices.DllImport("KERNEL32.dll", EntryPoint = "RtlZeroMemory")]
        public static extern bool ZeroMemory(ref string Destination, int Length);

        //Function to create 64 bit key for file
        public static string GenerateFileKey()
        {
            //Create an instance of Symetric Algorithm. Key and IV is generated automatically.
            DESCryptoServiceProvider desCrypto = (DESCryptoServiceProvider)DESCryptoServiceProvider.Create();

            //Use the autogenerated key for encryption
            return ASCIIEncoding.ASCII.GetString(desCrypto.Key);
        }


        //File encryption method
         public static void EncryptFile(string file, string key)
        {
            //Input and output file are the same.
            FileStream fs = new FileStream(file, FileMode.Open, FileAccess.ReadWrite);

            //Create new DESCryptoServiceProvider
            DESCryptoServiceProvider DES = new DESCryptoServiceProvider();

            //Get the key and IV
            DES.Key = ASCIIEncoding.ASCII.GetBytes(key);
            DES.IV = ASCIIEncoding.ASCII.GetBytes(key);

            //Crypto transform
            ICryptoTransform desencrypt = DES.CreateEncryptor();
            CryptoStream crypto = new CryptoStream(fs, desencrypt, CryptoStreamMode.Write);

            //Create byte array and then transform.
            byte[] bytearrayinput = new byte[fs.Length - 1];
            fs.Read(bytearrayinput, 0, bytearrayinput.Length);
            crypto.Write(bytearrayinput, 0, bytearrayinput.Length);
            fs.Close();
        }

        public static void DecryptFile(string file, string key)
        {
            DESCryptoServiceProvider DES = new DESCryptoServiceProvider();
            //Create 64 bit key and iv.

            DES.Key = ASCIIEncoding.ASCII.GetBytes(key);

            //Set initialization vector
            DES.IV = ASCIIEncoding.ASCII.GetBytes(key);


            //Create a file stream to read the encrypted file back.
            FileStream fsRead = new FileStream(file, FileMode.Open, FileAccess.Read);

            //Create a DES Decryptor object
            ICryptoTransform desdecrypt = DES.CreateDecryptor();

            CryptoStream cryptStreamDecr = new CryptoStream(fsRead, desdecrypt, CryptoStreamMode.Read);
        }
    }
}
